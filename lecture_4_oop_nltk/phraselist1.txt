Python is an easy to
learn powerful programming language It
has efficient highlevel data structures
and a simple but effective
approach to objectoriented programming Python’s
elegant syntax and dynamic typing
together with its interpreted nature
make it an ideal language
for scripting and rapid application
development in many areas on
most platforms The Python interpreter
and the extensive standard library
are freely available in source
or binary form for all
major platforms from the Python
Web site and may be
freely distributed The same site
also contains distributions of and
pointers to many free third
party Python modules programs and
tools and additional documentation 
The Python interpreter is easily
extended with new functions and
data types implemented in C
or C or other languages
callable from C Python is
also suitable as an extension
language for customizable applications 
This tutorial introduces the reader
informally to the basic concepts
and features of the Python
language and system It helps
to have a Python interpreter
handy for handson experience but
all examples are selfcontained so
the tutorial can be read
offline as well  For
a description of standard objects
and modules see The Python
Standard Library The Python Language
Reference gives a more formal
definition of the language To
write extensions in C or
C read Extending and Embedding
the Python Interpreter and PythonC
API Reference Manual There are
also several books covering Python
in depth  This tutorial
does not attempt to be
comprehensive and cover every single
feature or even every commonly
used feature Instead it introduces
many of Python’s most noteworthy
features and will give you
a good idea of the
language’s flavor and style After
reading it you will be
able to read and write
Python modules and programs and
you will be ready to
learn more about the various
Python library modules described in
The Python Standard Library 
If you do much work
on computers eventually you find
that there’s some task you’d
like to automate For example
you may wish to perform
a searchandreplace over a large
number of text files or
rename and rearrange a bunch
of photo files in a
complicated way Perhaps you’d like
to write a small custom
database or a specialized GUI
application or a simple game
 If you’re a professional
software developer you may have
to work with several CCJava
libraries but find the usual
writecompiletestrecompile cycle is too slow
Perhaps you’re writing a test
suite for such a library
and find writing the testing
code a tedious task Or
maybe you’ve written a program
that could use an extension
language and you don’t want
to design and implement a
whole new language for your
application  Python is just
the language for you 
You could write a Unix
shell script or Windows batch
files for some of these
tasks but shell scripts are
best at moving around files
and changing text data not
wellsuited for GUI applications or
games You could write a
CCJava program but it can
take a lot of development
time to get even a
firstdraft program Python is simpler
to use available on Windows
Mac OS X and Unix
operating systems and will help
you get the job done
more quickly  Python is
simple to use but it
is a real programming language
offering much more structure and
support for large programs than
shell scripts or batch files
can offer On the other
hand Python also offers much
more error checking than C
and being a veryhighlevel language
it has highlevel data types
built in such as flexible
arrays and dictionaries Because of
its more general data types
Python is applicable to a
much larger problem domain than
Awk or even Perl yet
many things are at least
as easy in Python as
in those languages  Python
allows you to split your
program into modules that can
be reused in other Python
programs It comes with a
large collection of standard modules
that you can use as
the basis of your programs
— or as examples to
start learning to program in
Python Some of these modules
provide things like file IO
system calls sockets and even
interfaces to graphical user interface
toolkits like Tk  Python
is an interpreted language which
can save you considerable time
during program development because no
compilation and linking is necessary
The interpreter can be used
interactively which makes it easy
to experiment with features of
the language to write throwaway
programs or to test functions
during bottomup program development It
is also a handy desk
calculator  Python enables programs
to be written compactly and
readably Programs written in Python
are typically much shorter than
equivalent C C or Java
programs for several reasons 
the highlevel data types allow
you to express complex operations
in a single statement statement
grouping is done by indentation
instead of beginning and ending
brackets no variable or argument
declarations are necessary Python is
extensible if you know how
to program in C it
is easy to add a
new builtin function or module
to the interpreter either to
perform critical operations at maximum
speed or to link Python
programs to libraries that may
only be available in binary
form such as a vendorspecific
graphics library Once you are
really hooked you can link
the Python interpreter into an
application written in C and
use it as an extension
or command language for that
application  By the way
the language is named after
the BBC show “Monty Python’s
Flying Circus” and has nothing
to do with reptiles Making
references to Monty Python skits
in documentation is not only
allowed it is encouraged 
Now that you are all
excited about Python you’ll want
to examine it in some
more detail Since the best
way to learn a language
is to use it the
tutorial invites you to play
with the Python interpreter as
you read  In the
next chapter the mechanics of
using the interpreter are explained
This is rather mundane information
but essential for trying out
the examples shown later 
The rest of the tutorial
introduces various features of the
Python language and system through
examples beginning with simple expressions
statements and data types through
functions and modules and finally
touching upon advanced concepts like
exceptions and userdefined classes 
Writing SourceCompatible Python 23 Code
Over the years the Python
community has discovered that the
easiest way to support both
Python 2 and 3 in
parallel is to write Python
code that works in either
version While this might sound
counterintuitive at first it actually
is not difficult and typically
only requires following some select
nonidiomatic practices and using some
key projects to help make
bridging between Python 2 and
3 easier  Projects to
Consider The lowest level library
for supporting Python 2 
3 simultaneously is six Reading
through its documentation will give
you an idea of where
exactly the Python language changed
between versions 2  3
and thus what you will
want the library to help
you continue to support 
To help automate porting your
code over to using six
you can use modernize This
project will attempt to rewrite
your code to be as
modern as possible while using
six to smooth out any
differences between Python 2 
3  If you want
to write your compatible code
to feel more like Python
3 there is the future
project It tries to provide
backports of objects from Python
3 so that you can
use them from Python 2compatible
code eg replacing the bytes
type from Python 2 with
the one from Python 3
It also provides a translation
script like modernize its translation
code is actually partially based
on it to help start
working with a preexisting code
base It is also unique
in that its translation script
will also port Python 3
code backwards as well as
Python 2 code forwards 
Tips  Tricks To help
with writing sourcecompatible code using
one of the projects mentioned
in Projects to Consider consider
following the below suggestions Some
of them are handled by
the suggested projects so if
you do use one of
them then read their documentation
first to see which suggestions
below will taken care of
for you  Support Python
27  As a first
step make sure that your
project is compatible with Python
27 This is just good
to do as Python 27
is the last release of
Python 2 and thus will
be used for a rather
long time It also allows
for use of the 3
flag to Python to help
discover places in your code
where compatibility might be an
issue the 3 flag is
in Python 26 but Python
27 adds more warnings 
Try to Support Python 26
and Newer Only  While
not possible for all projects
if you can support Python
26 and newer only your
life will be much easier
Various future statements stdlib additions
etc exist only in Python
26 and later which greatly
assist in supporting Python 3
But if you project must
keep support for Python 25
then it is still possible
to simultaneously support Python 3
 Below are the benefits
you gain if you only
have to support Python 26
and newer Some of these
options are personal choice while
others are strongly recommended the
ones that are more for
personal choice are labeled as
such If you continue to
support older versions of Python
then you at least need
to watch out for situations
that these solutions fix and
handle them appropriately which is
where library help from eg
six comes in handy 
from future import printfunction 
It will not only get
you used to typing print
as a function instead of
a statement but it will
also give you the various
benefits the function has over
the Python 2 statement six
provides a function if you
support Python 25 or older
 from future import unicodeliterals
 If you choose to
use this future statement then
all string literals in Python
2 will be assumed to
be Unicode as is already
the case in Python 3
If you choose not to
use this future statement then
you should mark all of
your text strings with a
u prefix and only support
Python 33 or newer But
you are strongly advised to
do one or the other
six provides a function in
case you don’t want to
use the future statement and
you want to support Python
32 or older  Bytesstring
literals  This is a
very important one Prefix Python
2 strings that are meant
to contain bytes with a
b prefix to very clearly
delineate what is and is
not a Python 3 text
string six provides a function
to use for Python 25
compatibility  This point cannot
be stressed enough make sure
you know what all of
your string literals in Python
2 are meant to be
in Python 3 Any string
literal that should be treated
as bytes should have the
b prefix Any string literal
that should be Unicodetext in
Python 2 should either have
the u literal supported but
ignored in Python 33 and
later or you should have
from future import unicodeliterals at
the top of the file
But the key point is
you should know how Python
3 will treat every one
one of your string literals
and you should mark them
as appropriate  There are
some differences between byte literals
in Python 2 and those
in Python 3 thanks to
the bytes type just being
an alias to str in
Python 2 See the Handle
Common “Gotchas” section for what
to watch out for 
from future import absoluteimport 
Discussed in more detail below
but you should use this
future statement to prevent yourself
from accidentally using implicit relative
imports  Supporting Python 25
and Newer Only  If
you are supporting Python 25
and newer there are still
some features of Python that
you can utilize  from
future import absoluteimport  Implicit
relative imports eg importing spambacon
from within spameggs with the
statement import bacon do not
work in Python 3 This
future statement moves away from
that and allows the use
of explicit relative imports eg
from  import bacon 
In Python 25 you must
use the future statement to
get to use explicit relative
imports and prevent implicit ones
In Python 26 explicit relative
imports are available without the
statement but you still want
the future statement to prevent
implicit relative imports In Python
27 the future statement is
not needed In other words
unless you are only supporting
Python 27 or a version
earlier than Python 25 use
this future statement  Mark
all Unicode strings with a
u prefix  While Python
26 has a future statement
to automatically cause Python 2
to treat all string literals
as Unicode Python 25 does
not have that shortcut This
means you should go through
and mark all string literals
with a u prefix to
turn them explicitly into text
strings where appropriate and only
support Python 33 or newer
Otherwise use a project like
six which provides a function
to pass all text string
literals through   
